// 비트 이동 연산자 : >>, >>>, <<,
package step04_Operators;

public class Exam04_3{
    public static void main(String[] args) {

        int i = 0b01101001;;
        System.out.println( i >>> 1);        //0011_0100 =>52
        System.out.println( i >>> 2);        //0001_1010 =>26
        System.out.println( i >>> 3);        //0000_1101 =>13
        System.out.println( i >>> 4);        //0000_0110 ==>6
        // >>> 연산자를 사용하여 오른쪽으로 이동한다면, 왼쪽 빈자리는 무조건 0으로 채운다.
        // 그래서 양수일때는 >> 연산자와 같은 결과가 나오지만
        // 다음과 같이 음수 일때는 양수로 바뀌는 결과가 나온다.
        

        // 음수를 이동
        i = 0b11111111_11111111_11111111_10101001;;     //-87
        System.out.println(i);              //0011_0100 =>52
        

        System.out.println( i >>> 1);        //0001_1010 => -44
        // 1_11111111_11111111_11111111_1010100|1
        System.out.println( i >>> 2);        //0001_1010 => -22
        // 11_11111111_11111111_11111111_101010|01
        System.out.println( i >>> 3);        //0000_1101 => -11
        // 111_11111111_11111111_11111111_10101|010
        System.out.println( i >>> 4);        //0000_0110 ==> - 6
        // 1111_11111111_11111111_11111111_1010|1010
        // => 2로 나눈 후에 소수점이 있으면 그 수보다 더 작은 정수값이 되는 결과가 나온다.

    }
}

// 오른쪽 이동
// -1 비트 이동은 곱하기 2한 것과 같은 효과를 준다