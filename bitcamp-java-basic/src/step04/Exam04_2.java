// 비트 이동 연산자 : >>, >>>, <<,
package step04;

public class Exam04_2{
    public static void main(String[] args) {

        int i = 0b01101001;;
        System.out.println( i >> 1);        //0011_0100 =>52
        System.out.println( i >> 2);        //0001_1010 =>26
        System.out.println( i >> 3);        //0000_1101 =>13
        System.out.println( i >> 4);        //0000_0110 ==>6
        

        // 오른으로 이동 후 , 
        // 왼쪽 빈자리 : 원래 숫자와 같은 부호로 값으로 채운다
        //              양수면 0, 음수면 1을 채운다.
        //              
        // 오른쪽의 넘어간 비트 : 짜른다.
        
        // 음수를 이동
        i = 0b11111111_11111111_11111111_10101001;;     //-87
        System.out.println(i);              //0011_0100 =>52
        System.out.println( i >> 1);        //0001_1010 => -44
        // 1_11111111_11111111_11111111_1010100|1
        System.out.println( i >> 2);        //0001_1010 => -22
        // 11_11111111_11111111_11111111_101010|01
        System.out.println( i >> 3);        //0000_1101 => -11
        // 111_11111111_11111111_11111111_10101|010
        System.out.println( i >> 4);        //0000_0110 ==> - 6
        // 1111_11111111_11111111_11111111_1010|1010
        // => 2로 나눈 후에 소수점이 있으면 그 수보다 더 작은 정수값이 되는 결과가 나온다.

    }
}

// 오른쪽 이동
// -1 비트 이동은 곱하기 2한 것과 같은 효과를 준다